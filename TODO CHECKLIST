1) Create the columns sections for the table inside your migrate file
* add a column for the title
* add a description column
* adding inside the database a dateTime of when I created the value displaying inside your database

2) Grab the welcome route and put it inside your controller file using the restful function index

3) Create a route inside your web file that replaced your welcome route with your todocontroller file
*Import your todocontroller inside your web file

4) Add @csrf inside your form inside your welcome.blade.app file

5) Create a route that'll post values inside your database with a function that's using the store function for your todoController function
* request() means: you're displaying the value for attributes inside your html tags
* validate() means: That it is basically setting a set of rules that need to be meet inside the method

6) Use the mass assignment fillable variable and paste inside your tables values

7) Inside the index function you are going to create a variable $todos that'll target all() the data from your input fields and display it on the browser

8) Create a variable that'll ::all() your data from the index function that connects to your variable. Next create an array that's connected to your return view that'll assign the value to your variable. After that go to your welcome page and foreach your html and then use blade templating to target your title and description so it can display on the browser page

9) Create a restful function called update() and inside that function you're going to use the $todo that'll access the model and target it to the restful function update() inside the update() create array brackets that'll use the value "isDone" inside and assign it true. Lastly inside the parameter for the restful function update you are going to call the Todo model and then after that you are going to call the $todo variable. That's the only way that variable will be able to connect with the column inside the database.

10) Go to your web.file and create a route using patch and inside that patch target with $todo/{}, after that target the todocontroller
* Reason why you are using a wildcard is because you are calling it from adding the $todo inside the update function

11) Go to welcome.blade.php and create a form that is using the method="POST" with action="/{$todo->id}" underneath use @csrf and use method="PATCH" wrap around both the buttons

12) Last thing to do is create a route using delete and target the todocontroller inside the route with destroy

13) Go to your todocontroller and create a function that'll target $todo->destroy(); and you'll be able to remove the whole list from your todo app. Also, don't forget to call on the todo file and add the $todo inside the function


NEW FEATURE FOR THE PROJECT
* Adding inside the database a dateTime of when I created the value displaying inside your database